module Sequel
  class Model
    def self.[]: (*untyped) -> instance?

    def self.columns: -> Array[Symbol]
  
    def self.create: (**untyped) ?{ (instance) -> void } -> instance

    def self.dataset_module: (Module?) ?{ -> void } -> void

    def self.db: -> Database
    
    def self.db=: (Database) -> void
    
    def self.db_schema: -> Hash[Symbol, untyped]

    def self.def_column_alias: (Symbol, Symbol) -> void

    def self.def_Model: (Module) -> void

    def self.find: (*untyped) ?{ -> void } -> instance?
    
    def self.find_or_create: (**untyped) ?{ (instance) -> void } -> instance

    def self.freeze: -> void

    def self.has_dataset?: -> bool

    def self.implicit_table_name: -> Symbol

    def self.no_primary_key: -> void
    
    def self.plugin: (Symbol, *untyped) ?{ -> void } -> void

    def self.primary_key_hash: (untyped) -> Hash[Symbol, untyped]

    def self.set_dataset: (untyped, **untyped) -> void

    def self.table_name: -> Symbol

    def self.one_through_one: (Symbol, **untyped) -> void

    def self.one_to_many: (Symbol, **untyped) -> void

    def self.one_to_one: (Symbol, **untyped) -> void

    def self.many_to_many: (Symbol, **untyped) -> void

    def self.many_to_one: (Symbol, **untyped) -> void

    def ==: (untyped) -> bool

    def ===: (untyped) -> bool

    def []: (Symbol) -> untyped

    def []=: (Symbol, untyped)-> untyped

    def autoincrementing_primary_key: -> Symbol

    def cancel_action: (?String?) -> void

    def changed_columns: -> Array[Symbol]

    def delete: -> void

    def destroy: -> void

    def each: { (Symbol, untyped) -> void } -> void

    def eql?: (untyped) -> bool

    def exists?: -> bool

    def extend: (Module) -> void

    def freeze: -> void

    def hash: -> Integer

    def id: -> Integer

    def inspect: -> String

    def keys: -> Array[Symbol]

    def lock!: (?Symbol) -> void

    def marshallable!: -> untyped

    def modified!: (?Symbol?) -> void

    def modified?: (?Symbol?) -> bool

    def new?: -> bool

    def pk: -> Integer

    def pk_hash: -> Hash[Symbol, Integer]

    def qualified_pk_hash: -> Hash[untyped, untyped]

    def refresh: -> untyped

    def reload: -> untyped

    def save: (**untyped) -> untyped

    def save_changes: (**untyped) -> untyped

    def set: (Hash[Symbol, untyped]) -> void

    def skip_validation_on_next_save!: -> void

    def this: -> untyped

    def update: (**untyped) -> untyped

    def valid?: -> bool

    def validate: -> void

    def values: -> Hash[Symbol, untyped]
  end
end
